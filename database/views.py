from django.shortcuts import render

import requests
from django.http import JsonResponse
from database.src.configations import create_or_update_configations
from database.src.cvss_metrics import create_or_update_cvss_metrics
from database.src.descriptions import create_or_update_descriptions
from database.src.references import create_or_update_references
from database.src.weakness import create_or_update_weakness_data

from .models import CVE, Description, CVSSMetric, Weakness, WeaknessDescription, Configuration, Node, CPEMatch, Reference


def update_database_from_nvd():
    url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'

    try:
        response = get_response_from_url(url)
        data = get_json_from_response(response)

        for vulnerability_data in get_vulnerabilities_data(data):
            cve_data = vulnerability_data.get('cve', {})
            cve_id = cve_data.get('id')

            existing_cve = get_existing_cve(cve_id)

            if existing_cve:
                print(f"{cve_id} already exists in the database.")
                create_or_update_descriptions(existing_cve, cve_data.get('descriptions', []))
                if cve_data['metrics']:
                    create_or_update_cvss_metrics(existing_cve, cve_data['metrics']['cvssMetricV2'][0])
                create_or_update_weakness_data(existing_cve, cve_data.get('weaknesses', []))
                create_or_update_references(existing_cve, cve_data.get('references', []))
                
            else:
                new_cve = create_new_cve_entry(cve_data)

                create_or_update_descriptions(new_cve, cve_data.get('descriptions', []))
                if cve_data['metrics']:
                    create_or_update_cvss_metrics(new_cve, cve_data['metrics']['cvssMetricV2'][0])
                create_or_update_weakness_data(new_cve, cve_data.get('weaknesses', []))
                create_or_update_configations(new_cve, cve_data.get('configurations', []))
                create_or_update_references(new_cve, cve_data.get('references', []))

                print(f"{cve_id} added to the database.")

        return JsonResponse({'status': 'success', 'message': 'Database updated successfully'})

    except Exception as exc:
        print(f"Failed to update database from NVD: {exc}")
        return JsonResponse({'status': 'error', 'message': str(exc)})


def get_response_from_url(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response
    except requests.exceptions.RequestException as e:
        raise Exception(f"Failed to fetch response from {url}: {e}")


def get_json_from_response(response):
    try:
        return response.json()
    except Exception as e:
        raise Exception(f"Failed to parse response JSON: {e}")


def get_vulnerabilities_data(data):
    try:
        return data.get('vulnerabilities', [])
    except Exception as e:
        raise Exception(f"Failed to get vulnerabilities data: {e}")


def get_existing_cve(cve_id):
    try:
        return CVE.objects.filter(id=cve_id).first()
    except Exception as e:
        raise Exception(f"Failed to get existing CVE: {e}")


def create_new_cve_entry(cve_data):
    try:
        return CVE.objects.create(
            id=cve_data.get('id'),
            sourceIdentifier=cve_data.get('sourceIdentifier'),
            published=cve_data.get('published'),
            lastModified=cve_data.get('lastModified'),
            vulnStatus=cve_data.get('vulnStatus')
        )
    except Exception as e:
        raise Exception(f"Failed to create new CVE entry: {e}")

