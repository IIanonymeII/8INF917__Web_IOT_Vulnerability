from django.shortcuts import render

import requests
from django.http import JsonResponse
from .models import CVE, Description, CVSSMetric, Weakness, WeaknessDescription, Configuration, Node, CPEMatch, Reference

def update_database_from_nvd():
    url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'

    try:
        response = requests.get(url)
        data = response.json()
        
        # Loop through vulnerabilities
        for vulnerability_data in data.get('vulnerabilities', []):
            cve_data = vulnerability_data.get('cve', {})
            

            cve_id = cve_data.get('id')

            # Check if CVE already exists in the database
            existing_cve = CVE.objects.filter(id=cve_id).first()

            if existing_cve:
                print(f"{cve_id} already exists in the database.")
                # desciption
            else:
                # Create new CVE entry
                new_cve = CVE.objects.create(
                    id=cve_id,
                    sourceIdentifier=cve_data.get('sourceIdentifier'),
                    published=cve_data.get('published'),
                    lastModified=cve_data.get('lastModified'),
                    vulnStatus=cve_data.get('vulnStatus')
                )
                # Create or update descriptions
                for description_data in cve_data.get('descriptions', []):
                    Description.objects.update_or_create(
                        cve=new_cve,
                        lang=description_data['lang'],
                        defaults={'value': description_data['value']})
                # # Create or update CVSS metrics
                cvss_metrics_data = cve_data['metrics']['cvssMetricV2'][0]
                cvss_metric, created = CVSSMetric.objects.update_or_create(
                    cve=new_cve,
                    defaults={
                        'source': cvss_metrics_data['source'],
                        'type': cvss_metrics_data['type'],
                        'version': cvss_metrics_data['cvssData']['version'],
                        'vectorString': cvss_metrics_data['cvssData']['vectorString'],
                        'accessVector': cvss_metrics_data['cvssData']['accessVector'],
                        'accessComplexity': cvss_metrics_data['cvssData']['accessComplexity'],
                        'authentication': cvss_metrics_data['cvssData']['authentication'],
                        'confidentialityImpact': cvss_metrics_data['cvssData']['confidentialityImpact'],
                        'integrityImpact': cvss_metrics_data['cvssData']['integrityImpact'],
                        'availabilityImpact': cvss_metrics_data['cvssData']['availabilityImpact'],
                        # 'baseScore': cvss_metrics_data['baseScore'],
                        'baseSeverity': cvss_metrics_data['baseSeverity'],
                        'exploitabilityScore': cvss_metrics_data['exploitabilityScore'],
                        'impactScore': cvss_metrics_data['impactScore'],
                        'acInsufInfo': cvss_metrics_data['acInsufInfo'],
                        'obtainAllPrivilege': cvss_metrics_data['obtainAllPrivilege'],
                        'obtainUserPrivilege': cvss_metrics_data['obtainUserPrivilege'],
                        'obtainOtherPrivilege': cvss_metrics_data['obtainOtherPrivilege'],
                        'userInteractionRequired': cvss_metrics_data['userInteractionRequired'],
                    }
                )

                print(f"{cve_id} added to the database.")

        return JsonResponse({'status': 'success', 'message': 'Database updated successfully'})
    
    except Exception as e:
        print(f"Failed to update database from NVD: {e}")
        return JsonResponse({'status': 'error', 'message': str(e)})
   

            
# # Create or update descriptions
# for description_data in cve_data.get('descriptions', []):
#     Description.objects.update_or_create(
#         cve=cve,
#         lang=description_data['lang'],
#         defaults={'value': description_data['value']}
#     )

# # Create or update CVSS metrics
# cvss_metrics_data = cve_data['metrics']['cvssMetricV2'][0]
# cvss_metric, created = CVSSMetric.objects.update_or_create(
#     cve=cve,
#     defaults={
#         'source': cvss_metrics_data['source'],
#         'type': cvss_metrics_data['type'],
#         'version': cvss_metrics_data['cvssData']['version'],
#         'vectorString': cvss_metrics_data['cvssData']['vectorString'],
#         'accessVector': cvss_metrics_data['cvssData']['accessVector'],
#         'accessComplexity': cvss_metrics_data['cvssData']['accessComplexity'],
#         'authentication': cvss_metrics_data['cvssData']['authentication'],
#         'confidentialityImpact': cvss_metrics_data['cvssData']['confidentialityImpact'],
#         'integrityImpact': cvss_metrics_data['cvssData']['integrityImpact'],
#         'availabilityImpact': cvss_metrics_data['cvssData']['availabilityImpact'],
#         'baseScore': cvss_metrics_data['baseScore'],
#         'baseSeverity': cvss_metrics_data['baseSeverity'],
#         'exploitabilityScore': cvss_metrics_data['exploitabilityScore'],
#         'impactScore': cvss_metrics_data['impactScore'],
#         'acInsufInfo': cvss_metrics_data['acInsufInfo'],
#         'obtainAllPrivilege': cvss_metrics_data['obtainAllPrivilege'],
#         'obtainUserPrivilege': cvss_metrics_data['obtainUserPrivilege'],
#         'obtainOtherPrivilege': cvss_metrics_data['obtainOtherPrivilege'],
#         'userInteractionRequired': cvss_metrics_data['userInteractionRequired'],
#     }
# )

# # Create or update weaknesses
# for weakness_data in cve_data.get('weaknesses', []):
#     weakness, created = Weakness.objects.update_or_create(
#         cve=cve,
#         source=weakness_data['source'],
#         type=weakness_data['type']
#     )
    
#     # Create or update weakness descriptions
#     for weakness_description_data in weakness_data.get('description', []):
#         WeaknessDescription.objects.update_or_create(
#             weakness=weakness,
#             lang=weakness_description_data['lang'],
#             defaults={'value': weakness_description_data['value']}
#         )

# # Create or update configurations
# for configuration_data in cve_data.get('configurations', []):
#     configuration, created = Configuration.objects.get_or_create(cve=cve)
    
#     # Create or update nodes
#     for node_data in configuration_data['nodes']:
#         node, created = Node.objects.get_or_create(
#             configuration=configuration,
#             operator=node_data['operator'],
#             negate=node_data['negate']
#         )
        
#         # Create or update CPE matches
#         for cpe_match_data in node_data['cpeMatch']:
#             CPEMatch.objects.update_or_create(
#                 node=node,
#                 vulnerable=cpe_match_data['vulnerable'],
#                 criteria=cpe_match_data['criteria'],
#                 matchCriteriaId=cpe_match_data['matchCriteriaId']
#             )

# # Create or update references
# for reference_data in cve_data.get('references', []):
#     Reference.objects.update_or_create(
#         cve=cve,
#         url=reference_data['url'],
#         source=reference_data['source']
#     )

#     return JsonResponse({'status': 'success', 'message': 'Database updated successfully'})

# except Exception as e:
#     return JsonResponse({'status': 'error', 'message': str(e)})
