from django.db import models
from django.utils import timezone

class CVE(models.Model):
    id = models.CharField(max_length=50, primary_key=True)
    sourceIdentifier = models.CharField(max_length=100)
    published = models.DateTimeField(default=timezone.now)
    lastModified = models.DateTimeField(default=timezone.now)
    vulnStatus = models.CharField(max_length=50)

    def get_english_description(self):
	    description = self.descriptions.filter(lang="en").first()
	    return description.value if description else "No english description"

    def to_dict(self):
        return {
            'id': self.id,
            'sourceIdentifier': self.sourceIdentifier,
            'published': self.published,
            'lastModified': self.lastModified,
            'vulnStatus': self.vulnStatus,
            'descriptions': [description.to_dict() for description in self.descriptions.all()],
            'metrics': self.metrics.to_dict(),
            'weaknesses': self.weaknesses.to_dict() if self.weaknesses else None,
            'configurations': self.configurations.to_dict() if hasattr(self, 'configurations') else None,
            'references': [reference.to_dict() for reference in self.references.all()],
        }

    class Meta:
        verbose_name = "CVE"
        verbose_name_plural = "CVEs"


class Description(models.Model):
    cve = models.ForeignKey(CVE, related_name='descriptions', on_delete=models.CASCADE)
    lang = models.CharField(max_length=10)
    value = models.TextField()

    def to_dict(self):
	    return {
			'lang': self.lang,
			'value': self.value
		}
    
    class Meta:
        verbose_name = "Description"
        verbose_name_plural = "Descriptions"

class CVSSMetric(models.Model):
    cve = models.OneToOneField(CVE, related_name='metrics', on_delete=models.CASCADE)
    source = models.CharField(max_length=100)
    type = models.CharField(max_length=50)
    version = models.CharField(max_length=10)
    vectorString = models.CharField(max_length=100)
    accessVector = models.CharField(max_length=50)
    accessComplexity = models.CharField(max_length=50)
    authentication = models.CharField(max_length=50)
    confidentialityImpact = models.CharField(max_length=50)
    integrityImpact = models.CharField(max_length=50)
    availabilityImpact = models.CharField(max_length=50)
    baseScore = models.FloatField(null=True, blank=True)
    baseSeverity = models.CharField(max_length=50, null=True, blank=True)
    exploitabilityScore = models.FloatField(null=True, blank=True)
    impactScore = models.FloatField(null=True, blank=True)
    acInsufInfo = models.BooleanField(null=True, blank=True)
    obtainAllPrivilege = models.BooleanField(null=True, blank=True)
    obtainUserPrivilege = models.BooleanField(null=True, blank=True)
    obtainOtherPrivilege = models.BooleanField(null=True, blank=True)
    userInteractionRequired = models.BooleanField(null=True, blank=True)

    def to_dict(self):
        return {
            'source': self.source,
			'type': self.type,
			'version': self.version,
			'vectorString': self.vectorString,
			'accessVector': self.accessVector,
			'accessComplexity': self.accessComplexity,
			'authentication': self.authentication,
			'confidentialityImpact': self.confidentialityImpact,
			'integrityImpact': self.integrityImpact,
			'availabilityImpact': self.availabilityImpact,
			'baseScore': self.baseScore,
			'baseSeverity': self.baseSeverity,
			'exploitabilityScore': self.exploitabilityScore,
			'impactScore': self.impactScore,
			'acInsufInfo': self.acInsufInfo,
			'obtainAllPrivilege': self.obtainAllPrivilege,
			'obtainUserPrivilege': self.obtainUserPrivilege,
			'obtainOtherPrivilege': self.obtainOtherPrivilege,
			'userInteractionRequired': self.userInteractionRequired
		}

    class Meta:
        verbose_name = "CVSS Metric"
        verbose_name_plural = "CVSS Metrics"

class Weakness(models.Model):
    cve = models.OneToOneField(CVE, related_name='weaknesses', on_delete=models.CASCADE)
    source = models.CharField(max_length=100)
    type = models.CharField(max_length=50)

    def to_dict(self):
        return {
            'source': self.source,
            'type': self.type,
            'descriptions': [description.to_dict() for description in self.descriptions.all()]
		}

    class Meta:
        verbose_name = "Weakness"
        verbose_name_plural = "Weaknesses"


class WeaknessDescription(models.Model):
    weakness = models.ForeignKey(Weakness, related_name='descriptions', on_delete=models.CASCADE)
    lang = models.CharField(max_length=10)
    value = models.TextField()

    def to_dict(self):
        return {
            'lang': self.lang,
			'value': self.value
		}
    
    class Meta:
        verbose_name = "Weakness Description"
        verbose_name_plural = "Weakness Descriptions"


class Configuration(models.Model):
    cve = models.OneToOneField(CVE, related_name='configurations', on_delete=models.CASCADE)

    def to_dict(self):
        return {
			'nodes': [node.to_dict() for node in self.nodes.all()]
		}

    class Meta:
        verbose_name = "Configuration"
        verbose_name_plural = "Configurations"


class Node(models.Model):
    configuration = models.ForeignKey(Configuration, related_name='nodes', on_delete=models.CASCADE)
    operator = models.CharField(max_length=10)
    negate = models.BooleanField()

    def to_dict(self):
        return {
			'operator': self.operator,
			'negate': self.negate,
			'cpe_matches': [cpe_match.to_dict() for cpe_match in self.cpe_matches.all()]
		}

    class Meta:
        verbose_name = "Node"
        verbose_name_plural = "Nodes"


class CPEMatch(models.Model):
    node = models.ForeignKey(Node, related_name='cpe_matches', on_delete=models.CASCADE)
    vulnerable = models.BooleanField()
    criteria = models.CharField(max_length=100)
    matchCriteriaId = models.CharField(max_length=100)

    def to_dict(self):
        return {
			'vulnerable': self.vulnerable,
			'criteria': self.criteria,
			'matchCriteriaId': self.matchCriteriaId
		}

    class Meta:
        verbose_name = "CPE Match"
        verbose_name_plural = "CPE Matches"


class Reference(models.Model):
    cve = models.ForeignKey(CVE, related_name='references', on_delete=models.CASCADE)
    url = models.URLField()
    source = models.CharField(max_length=100)

    def to_dict(self):
        return {
            'url': self.url,
			'source': self.source
		}

    class Meta:
        verbose_name = "Reference"
        verbose_name_plural = "References"