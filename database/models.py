from django.db import models
from django.utils import timezone

class CVE(models.Model):
    id = models.CharField(max_length=50, primary_key=True)
    sourceIdentifier = models.CharField(max_length=100)
    published = models.DateTimeField(default=timezone.now)
    lastModified = models.DateTimeField(default=timezone.now)
    vulnStatus = models.CharField(max_length=50)
    
    class Meta:
        verbose_name = "CVE"
        verbose_name_plural = "CVEs"


class Description(models.Model):
    cve = models.ForeignKey(CVE, related_name='descriptions', on_delete=models.CASCADE)
    lang = models.CharField(max_length=10)
    value = models.TextField()
    
    class Meta:
        verbose_name = "Description"
        verbose_name_plural = "Descriptions"

class CVSSMetric(models.Model):
    cve = models.OneToOneField(CVE, related_name='metrics', on_delete=models.CASCADE)
    source = models.CharField(max_length=100)
    type = models.CharField(max_length=50)
    version = models.CharField(max_length=10)
    vectorString = models.CharField(max_length=100)
    accessVector = models.CharField(max_length=50)
    accessComplexity = models.CharField(max_length=50)
    authentication = models.CharField(max_length=50)
    confidentialityImpact = models.CharField(max_length=50)
    integrityImpact = models.CharField(max_length=50)
    availabilityImpact = models.CharField(max_length=50)
    baseScore = models.FloatField(null=True, blank=True)
    baseSeverity = models.CharField(max_length=50, null=True, blank=True)
    exploitabilityScore = models.FloatField(null=True, blank=True)
    impactScore = models.FloatField(null=True, blank=True)
    acInsufInfo = models.BooleanField(null=True, blank=True)
    obtainAllPrivilege = models.BooleanField(null=True, blank=True)
    obtainUserPrivilege = models.BooleanField(null=True, blank=True)
    obtainOtherPrivilege = models.BooleanField(null=True, blank=True)
    userInteractionRequired = models.BooleanField(null=True, blank=True)
    
    class Meta:
        verbose_name = "CVSS Metric"
        verbose_name_plural = "CVSS Metrics"

class Weakness(models.Model):
    cve = models.OneToOneField(CVE, related_name='weaknesses', on_delete=models.CASCADE)
    source = models.CharField(max_length=100)
    type = models.CharField(max_length=50)
    
    class Meta:
        verbose_name = "Weakness"
        verbose_name_plural = "Weaknesses"


class WeaknessDescription(models.Model):
    weakness = models.ForeignKey(Weakness, related_name='descriptions', on_delete=models.CASCADE)
    lang = models.CharField(max_length=10)
    value = models.TextField()
    
    class Meta:
        verbose_name = "Weakness Description"
        verbose_name_plural = "Weakness Descriptions"


class Configuration(models.Model):
    cve = models.OneToOneField(CVE, related_name='configurations', on_delete=models.CASCADE)
    
    class Meta:
        verbose_name = "Configuration"
        verbose_name_plural = "Configurations"


class Node(models.Model):
    configuration = models.ForeignKey(Configuration, related_name='nodes', on_delete=models.CASCADE)
    operator = models.CharField(max_length=10)
    negate = models.BooleanField()
    
    class Meta:
        verbose_name = "Node"
        verbose_name_plural = "Nodes"


class CPEMatch(models.Model):
    node = models.ForeignKey(Node, related_name='cpe_matches', on_delete=models.CASCADE)
    vulnerable = models.BooleanField()
    criteria = models.CharField(max_length=100)
    matchCriteriaId = models.CharField(max_length=100)
    
    class Meta:
        verbose_name = "CPE Match"
        verbose_name_plural = "CPE Matches"


class Reference(models.Model):
    cve = models.ForeignKey(CVE, related_name='references', on_delete=models.CASCADE)
    url = models.URLField()
    source = models.CharField(max_length=100)
    
    class Meta:
        verbose_name = "Reference"
        verbose_name_plural = "References"