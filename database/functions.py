from django.shortcuts import render

import threading
import traceback
import json
import requests
from datetime import datetime
from django.http import JsonResponse
from django.utils import timezone

from .models import *

UPDATE_DATABASE = False

def fetch_data(url):
	print("Fetching " + url + "...")
	response = requests.get(url)
	response.raise_for_status()

	data = response.content.decode('utf-8')
	data = json.loads(data)

	return data

def process_data(data):
	try:
		for cve in data['results']:
			print("Processing " + cve['id'])

			if 'sources_release_date' in cve:
				release_date_str = cve['sources_release_date']['data'][0]['date']
				release_date = datetime.strptime(release_date_str, "%Y-%m-%dT%H:%M:%S")  # adjust the format string as per your date string
				release_date = timezone.make_aware(release_date)
			else:
				release_date = timezone.now()

			cve_obj, created = CVE.objects.get_or_create(id=cve['id'], defaults={
				'description': cve['description']['data'] if 'description' in cve else "N/A",
				'title': cve['title']['data'] if 'title' in cve else "N/A",
				'type': cve['type']['data'] if 'type' in cve else "N/A",
				'last_updated': cve['last_update_date'],
				'release_date': release_date,
				'severity': cve['cvss']['data'][0]['severity'][0]['value'] if 'cvss' in cve else "N/A"
			})

			if created:
				if 'affected_products' in cve:
					for product in cve['affected_products']['data']:
						product_obj = Product.objects.create(cve=cve_obj, model=product['model'], vendor=product['vendor'], version=product['version'])

				if ('external_ids' in cve):
					for data_source in cve['external_ids']['data']:
						data_source_obj = DataSources.objects.create(cve=cve_obj, name=data_source['db'], external_id=data_source['id'])

				if 'patch' in cve:
					for patch in cve['patch']['data']:
						patch_obj = Patch.objects.create(cve=cve_obj, name=patch['title'], url=patch['url'])

				# Save objects if not already in database
				cve_obj.save()
				product_obj.save()
				data_source_obj.save()
				patch_obj.save()
				print("\nAdded to database")
			else:
				print("\tAlready in database")

		if 'next' in data and data['next'] is not None:
			process_data(fetch_data(data['next']))
			print("Starting new page")
	except Exception as e:
		traceback.print_exc()

def update_database():
	try:
		process_data(fetch_data('https://www.variotdbs.pl/api/vulns/?format=json&limit=1000'))
		return JsonResponse({'status': 'ok'})

	except Exception as e:
		return JsonResponse({'error': 'An unexpected error occurred: {}'.format(str(e))}, status=500)

if UPDATE_DATABASE:
	# Créez un thread qui exécute la fonction update_data
	t = threading.Thread(target=update_database)
	# Démarrez le thread
	t.start()