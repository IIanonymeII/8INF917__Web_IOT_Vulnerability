

from database.models import Weakness, WeaknessDescription



def create_or_update_weakness_data(cve, cve_weaknesses):
    try:
        for weakness_data in cve_weaknesses:
            source = weakness_data.get('source')
            type = weakness_data.get('type')
            existing_weakness = get_existing_weakness(cve, source, type)
            
            if existing_weakness:
                update_existing_weakness( existing_weakness, weakness_data)
            else:
                create_new_weakness(cve, weakness_data)

    except Exception as exc:
        raise Exception(f"Failed to create or update weakness_data: {exc}")


def get_existing_weakness(cve, source, type):
    try:
        return Weakness.objects.filter(cve=cve, source=source, type=type).first()
    except Exception as e:
        raise Exception(f"Failed to get existing weakness: {e}")


def update_existing_weakness(existing_weakness, weakness_data):
    try:
        existing_descriptions = existing_weakness.descriptions.all()
        for weakness_description_data in weakness_data.get('description', []):
            lang = weakness_description_data['lang']
            value = weakness_description_data['value']
            existing_description = existing_descriptions.filter(lang=lang).first()
            if existing_description:
                if existing_description.value != value:
                    existing_description.value = value
                    existing_description.save()
                    print("    UPDATE -> weakness")
            else:
                create_new_description(existing_weakness, lang, value)
    except Exception as e:
        raise Exception(f"Failed to update existing weakness: {e}")


def create_new_weakness(cve, weakness_data):
    try:
        weakness = Weakness.objects.create(
            cve=cve,
            source=weakness_data.get('source'),
            type=weakness_data.get('type')
        )
        print("    CREATE -> weakness")
        create_weakness_descriptions(weakness, weakness_data.get('description', []))
    except Exception as e:
        raise Exception(f"Failed to create new weakness: {e}")


def create_new_description(existing_weakness, lang, value):
    try:
        WeaknessDescription.objects.create(weakness=existing_weakness, lang=lang, value=value)
        print("    CREATE -> weakness descrition")
    except Exception as e:
        raise Exception(f"Failed to create new description for weakness: {e}")


def create_weakness_descriptions(weakness, descriptions_data):
    try:
        for description_data in descriptions_data:
            create_new_description(weakness, description_data['lang'], description_data['value'])
    except Exception as e:
        raise Exception(f"Failed to create weakness descriptions: {e}")
