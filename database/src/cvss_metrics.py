

from database.models import CVSSMetric

def create_or_update_cvss_metrics(cve, cvss_metrics_data):
    try:
        existing_cvss_metrics = get_existing_cvss_metrics(cve, cvss_metrics_data['source'], cvss_metrics_data['type'])
        if existing_cvss_metrics:
            update_existing_cvss_metrics(existing_cvss_metrics, cvss_metrics_data)
        else:
            create_new_cvss_metrics(cve, cvss_metrics_data)

    except Exception as e:
        raise Exception(f"Failed to create or update CVSS metrics: {e}")


def get_existing_cvss_metrics(cve, source, type):
    try:
        return CVSSMetric.objects.filter(cve=cve, source=source, type=type).first()
    except Exception as e:
        raise Exception(f"Failed to get existing CVSS metrics: {e}")


def update_existing_cvss_metrics(existing_cvss_metrics, cvss_metrics_data):
    try:
        if existing_cvss_metrics.version != cvss_metrics_data['cvssData']['version'] or \
            existing_cvss_metrics.vectorString != cvss_metrics_data['cvssData']['vectorString'] or \
            existing_cvss_metrics.accessVector != cvss_metrics_data['cvssData']['accessVector'] or \
            existing_cvss_metrics.accessComplexity != cvss_metrics_data['cvssData']['accessComplexity'] or \
            existing_cvss_metrics.authentication != cvss_metrics_data['cvssData']['authentication'] or \
            existing_cvss_metrics.confidentialityImpact != cvss_metrics_data['cvssData']['confidentialityImpact'] or \
            existing_cvss_metrics.integrityImpact != cvss_metrics_data['cvssData']['integrityImpact'] or \
            existing_cvss_metrics.availabilityImpact != cvss_metrics_data['cvssData']['availabilityImpact'] or \
            existing_cvss_metrics.baseSeverity != cvss_metrics_data['baseSeverity'] or \
            existing_cvss_metrics.exploitabilityScore != cvss_metrics_data['exploitabilityScore'] or \
            existing_cvss_metrics.impactScore != cvss_metrics_data['impactScore'] or \
            existing_cvss_metrics.acInsufInfo != cvss_metrics_data['acInsufInfo'] or \
            existing_cvss_metrics.obtainAllPrivilege != cvss_metrics_data['obtainAllPrivilege'] or \
            existing_cvss_metrics.obtainUserPrivilege != cvss_metrics_data['obtainUserPrivilege'] or \
            existing_cvss_metrics.obtainOtherPrivilege != cvss_metrics_data['obtainOtherPrivilege'] or \
            existing_cvss_metrics.userInteractionRequired != cvss_metrics_data['userInteractionRequired']:
                existing_cvss_metrics.version = cvss_metrics_data['cvssData']['version']
                existing_cvss_metrics.vectorString = cvss_metrics_data['cvssData']['vectorString']
                existing_cvss_metrics.accessVector = cvss_metrics_data['cvssData']['accessVector']
                existing_cvss_metrics.accessComplexity = cvss_metrics_data['cvssData']['accessComplexity']
                existing_cvss_metrics.authentication = cvss_metrics_data['cvssData']['authentication']
                existing_cvss_metrics.confidentialityImpact = cvss_metrics_data['cvssData']['confidentialityImpact']
                existing_cvss_metrics.integrityImpact = cvss_metrics_data['cvssData']['integrityImpact']
                existing_cvss_metrics.availabilityImpact = cvss_metrics_data['cvssData']['availabilityImpact']
                existing_cvss_metrics.baseSeverity = cvss_metrics_data['baseSeverity']
                existing_cvss_metrics.exploitabilityScore = cvss_metrics_data['exploitabilityScore']
                existing_cvss_metrics.impactScore = cvss_metrics_data['impactScore']
                existing_cvss_metrics.acInsufInfo = cvss_metrics_data['acInsufInfo']
                existing_cvss_metrics.obtainAllPrivilege = cvss_metrics_data['obtainAllPrivilege']
                existing_cvss_metrics.obtainUserPrivilege = cvss_metrics_data['obtainUserPrivilege']
                existing_cvss_metrics.obtainOtherPrivilege = cvss_metrics_data['obtainOtherPrivilege']
                existing_cvss_metrics.userInteractionRequired = cvss_metrics_data['userInteractionRequired']
                existing_cvss_metrics.save()
                print("    UPDATE -> cvss_metrics")


    except Exception as e:
        raise Exception(f"Failed to update existing CVSS metrics: {e}")




def create_new_cvss_metrics(cve, cvss_metrics_data):
    try:
        CVSSMetric.objects.create(
            cve=cve,
            source=cvss_metrics_data['source'],
            type=cvss_metrics_data['type'],
            version=cvss_metrics_data['cvssData']['version'],
            vectorString=cvss_metrics_data['cvssData']['vectorString'],
            accessVector=cvss_metrics_data['cvssData']['accessVector'],
            accessComplexity=cvss_metrics_data['cvssData']['accessComplexity'],
            authentication=cvss_metrics_data['cvssData']['authentication'],
            confidentialityImpact=cvss_metrics_data['cvssData']['confidentialityImpact'],
            integrityImpact=cvss_metrics_data['cvssData']['integrityImpact'],
            availabilityImpact=cvss_metrics_data['cvssData']['availabilityImpact'],
            baseSeverity=cvss_metrics_data['baseSeverity'],
            exploitabilityScore=cvss_metrics_data['exploitabilityScore'],
            impactScore=cvss_metrics_data['impactScore'],
            acInsufInfo=cvss_metrics_data['acInsufInfo'],
            obtainAllPrivilege=cvss_metrics_data['obtainAllPrivilege'],
            obtainUserPrivilege=cvss_metrics_data['obtainUserPrivilege'],
            obtainOtherPrivilege=cvss_metrics_data['obtainOtherPrivilege'],
            userInteractionRequired=cvss_metrics_data['userInteractionRequired']
        )
        print("    CREATE -> cvss_metrics")
    except Exception as e:
        raise Exception(f"Failed to create new CVSS metrics: {e}")