console.log(devices)

// Remove devices with the same model
let filteredDevices = devices.filter(device => {
    // Vérifier si un device avec le même model existe
    let sameModelDevice = devices.find(d => (d.model === device.model + " " + device.version || d.model === device.model + device.version));
    // Si un tel device existe, le device actuel passe le filtre
    return sameModelDevice === undefined;
});

let uniqueVendors = {};
// Create a new object with the devices by vendor
filteredDevices.forEach(device => {
    // Add the device to the newDevices object
    if (!uniqueVendors[device.vendor]) {
        uniqueVendors[device.vendor] = {
            id: device.vendor,
            label: device.vendor,
            state: 'collapsed',
            tooltip: "Vendor",
            children: []
        };
    }

    // Add model to the vendor
    if (!uniqueVendors[device.vendor].children.find(child => child.id === device.model)) {
        uniqueVendors[device.vendor].children.push({
            id: device.model,
            label: device.model,
            state: 'collapsed',
            tooltip: "Model",
            children: []
        });
    }

    // Add device to the model
    if (device.version) {
        uniqueVendors[device.vendor].children.find(child => child.id === device.model).children.push({
            id: device.id,
            label: device.version ?? "Non spécifié",
            tooltip: "Version",
        });
    } else {
        // remove the state of parent
        uniqueVendors[device.vendor].children.find(child => child.id === device.model).state = "";
    }
});
let newDevices = {'': Object.values(uniqueVendors)};

let tree = new VanillaTreeView(document.getElementById('tree'), {
    provider: {
        async getChildren(id) {
            if (id === undefined)
                return newDevices[''];

            for (let vendor of newDevices['']) {
                if (vendor.id === id)
                    return vendor.children;

                for (let model of vendor.children) {
                    if (model.id === id)
                        return model.children;
                }
            }
            return [];
        }
    }
});

document.addEventListener('DOMContentLoaded', (event) => {
    const sectionHeaders = document.querySelectorAll('section:not(.infos) > div');

    sectionHeaders.forEach((header) => {
        header.addEventListener('click', (event) => {
            const sectionContent = header.nextElementSibling;
            const button = header.querySelector('p');

            sectionContent.style.display = (sectionContent?.style.display === 'none') ? 'block' : 'none';
            button.textContent = (sectionContent.style.display === 'none') ? '▼' : '▲';
        });
    });
});