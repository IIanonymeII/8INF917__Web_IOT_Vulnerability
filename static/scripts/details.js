console.log(devices)

// Remove devices with the same model
let filteredDevices = devices.filter(device => {
    // Vérifier si un device avec le même model existe
    let sameModelDevice = devices.find(d => (d.model === device.model + " " + device.version || d.model === device.model + device.version));
    // Si un tel device existe, le device actuel passe le filtre
    return sameModelDevice === undefined;
});

function getTreeContent(devicesList) {
    let uniqueVendors = {};

    // Create a new object with the devices by vendor
    devicesList.forEach(device => {
        // Add the device to the newDevices object
        if (!uniqueVendors[device.vendor]) {
            uniqueVendors[device.vendor] = {
                id: device.vendor,
                label: device.vendor,
                state: 'collapsed',
                tooltip: "Vendor",
                children: []
            };
        }

        // Add model to the vendor
        if (!uniqueVendors[device.vendor].children.find(child => child.id === device.model)) {
            uniqueVendors[device.vendor].children.push({
                id: device.model,
                label: device.model,
                state: 'collapsed',
                tooltip: "Model",
                children: []
            });
        }

        // Add device to the model
        if (device.version) {
            uniqueVendors[device.vendor].children.find(child => child.id === device.model).children.push({
                id: device.id,
                label: device.version ?? "Non spécifié",
                tooltip: "Version",
            });
        } else {
            // remove the state of parent
            uniqueVendors[device.vendor].children.find(child => child.id === device.model).state = "";
        }
    });
    return {'': Object.values(uniqueVendors)};
}

// Sections display
document.addEventListener('DOMContentLoaded', (event) => {
    const sectionHeaders = document.querySelectorAll('section:not(.infos) > div');

    sectionHeaders.forEach((header) => {
        if (header === null)
            return;

        header.addEventListener('click', (event) => {
            const sectionContent = header.nextElementSibling;
            const button = header.querySelector('p');

            if (sectionContent === null)
                return;

            sectionContent.style.display = (sectionContent.style.display === 'none') ? 'block' : 'none';
            button.textContent = (sectionContent.style.display === 'none') ? '▼' : '▲';
        });
    });
});

// devices serch
const detailsSearchInput = document.getElementById('details-search');

// Function to update the display of the table
function updateTable(results) {
    // Clear the table
    const treeElement = document.getElementById('tree');
    treeElement.innerHTML = '';

    new VanillaTreeView(document.getElementById('tree'), {
        provider: {
            async getChildren(id) {
                if (id === undefined)
                    return results[''];

                for (let vendor of results['']) {
                    if (vendor.id === id)
                        return vendor.children;

                    for (let model of vendor.children) {
                        if (model.id === id)
                            return model.children;
                    }
                }
                return [];
            }
        }
    });
}

const newDevices = getTreeContent(filteredDevices);
detailsSearchInput.addEventListener('input', (event) => {
    let search = event.target.value.toLowerCase();
    let results = filteredDevices.filter(device => {
        return device.vendor.toLowerCase().includes(search) || device.model.toLowerCase().includes(search) || (device.version && device.version.toLowerCase().includes(search));
    });
    console.log(results)
    updateTable(getTreeContent(results));
});

updateTable(newDevices);